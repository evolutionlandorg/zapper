#!/usr/bin/env bash

set -e

. $(PWD)/bin/init

# /**
# @notice This function is used to invest in given Uniswap V2 pair through ETH/ERC20 Tokens
# @param _FromTokenContractAddress The ERC20 token used for investment (address(0x00) if ether)
# @param _pairAddress The Uniswap pair address
# @param _amount The amount of fromToken to invest
# @param _minPoolTokens Reverts if less tokens received than this
# @param _swapTarget Excecution target for the first swap
# @param swapData DEX quote data
# @param affiliate Affiliate address
# @param transferResidual Set false to save gas by donating the residual remaining after a Zap
# @return Amount of LP bought
#  */
# function ZapIn(
#     address _FromTokenContractAddress,
#     address _pairAddress,
#     uint256 _amount,
#     uint256 _minPoolTokens,
#     address _swapTarget,
#     bytes calldata swapData,
#     address affiliate,
#     bool transferResidual
# ) external payable nonReentrant stopInEmergency returns (uint256) {

# 0x0000000000000000000000000000000000000000
# 0xBb2b8038a1640196FbE3e38816F3e67Cba72D940
# 399275204024750622
# 303274345912
# 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2
# 0xd0e30db0869584cd000000000000000000000000f4e386b070a18419b5d3af56699f8a438dd18e890000000000000000000000000000000000000000000000ddfe8aa67c603e0189
# 0x0000000000000000000000000000000000000000
# false

# ZapIn test buyToken=GOLD 
# amount1=$(seth --to-wei 3.2 ether)
# token0=$(seth call $TOKEN_LP_GOLD_RING "token0()(address)") # ring
# token1=$(seth call $TOKEN_LP_GOLD_RING "token1()(address)") # gold
# totalSupply=$(seth call $TOKEN_LP_GOLD_RING "totalSupply()(uint256)")
# res=$(seth call $TOKEN_LP_GOLD_RING "getReserves()(uint112,uint112,uint32)")
# res0=$(echo $res | cut -d' ' -f 1)
# res1=$(echo $res | cut -d' ' -f 2)
# swapAmount=$(seth call $ZAPIN "calculateSwapInAmount(uint256,uint256)(uint256)" $res1 $amount1)
# lp1=$(bc <<< "($amount1 - $swapAmount) * $totalSupply / ($res1 + $swapAmount)") 
# swapOut=$(seth call $UNISWAPV2LIBRARY "getAmountOut(uint256,uint256,uint256)(uint256)" $swapAmount $res1 $res0)
# lp0=$(bc <<< "$swapOut * $totalSupply / ($res0 + $swapOut)") 

# seth send $TOKEN_GOLD "approve(address)" $ZAPIN
# amount=$(seth --to-wei 3.2 ether)
# minlp=0
# swap=0x0000000000000000000000000000000000000000
# data=0x0
# aff=0x0000000000000000000000000000000000000000
# residual=false
# lp=$(seth call $ZAPIN "ZapIn(address,address,uint256,uint256,address,bytes,address,bool)(uint256)" $TOKEN_GOLD $TOKEN_LP_GOLD_RING $amount $minlp $swap $data $aff $residual)
# seth send $ZAPIN "ZapIn(address,address,uint256,uint256,address,bytes,address,bool)(uint256)" $TOKEN_GOLD $TOKEN_LP_GOLD_RING $amount $lp $swap $data $aff $residual


# # ZapIn test buyToken=RING
# seth send $TOKEN_RING "approve(address)" $ZAPIN
# amount=$(seth --to-wei 10 ether)
# minlp=$(seth --to-wei 0.5 ether)
# swap=0x0000000000000000000000000000000000000000
# data=0x0
# aff=0x0000000000000000000000000000000000000000
# residual=false
# seth call $ZAPIN "ZapIn(address,address,uint256,uint256,address,bytes,address,bool)(uint256)" $TOKEN_RING $TOKEN_LP_GOLD_RING $amount $minlp $swap $data $aff $residual    

# # ZapIn test buyToken=ETH
# amount=$(seth --to-wei 0.001 ether)
# minlp=$(seth --to-wei 0.1 ether)
# swap=$UNISWAP_ROUTERV2
# deadline=$(bc <<< "$(date +%s) + 60 * 20")
# data=$(seth calldata "swapExactETHForTokens(uint256,address[],address,uint256)" $minlp [$WETH,$TOKEN_RING] $ZAPIN $deadline)
# aff=0x0000000000000000000000000000000000000000
# residual=false
# seth send -V $amount $ZAPIN "ZapIn(address,address,uint256,uint256,address,bytes,address,bool)" 0x0000000000000000000000000000000000000000 $TOKEN_LP_GOLD_RING $amount $minlp $swap $data $aff $residual    

# curl 'https://api.zapper.fi/v1/zap-in/uniswap-v2/transaction?api_key=5d1237c2-3840-4733-8e92-c5a58fe81b88&ownerAddress=0x6ab5d3e5069326ff4601e77c3651f0c216d7e036&poolAddress=0xbb2b8038a1640196fbe3e38816f3e67cba72d940&sellTokenAddress=0x0000000000000000000000000000000000000000&sellAmount=399275204024750622&gasPrice=93100000000&slippagePercentage=0.03' \
#   -H 'authority: api.zapper.fi' \
#   -H 'accept: application/json, text/plain, */*' \
#   -H 'user-agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.192 Safari/537.36' \
#   -H 'origin: https://zapper.fi' \
#   -H 'sec-fetch-site: same-site' \
#   -H 'sec-fetch-mode: cors' \
#   -H 'sec-fetch-dest: empty' \
#   -H 'referer: https://zapper.fi/' \
#   -H 'accept-language: zh-CN,zh;q=0.9,en;q=0.8' \
#   --compressed

# {"to":"0x5acedba6c402e2682d312a7b4982eda0ccf2d2e3","from":"0x6ab5d3e5069326ff4601e77c3651f0c216d7e036","data":"0xdb254e500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000bb2b8038a1640196fbe3e38816f3e67cba72d940000000000000000000000000000000000000000000000000058a82aebf84521e000000000000000000000000000000000000000000000000000000469c8f45b8000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000048d0e30db0869584cd000000000000000000000000f4e386b070a18419b5d3af56699f8a438dd18e890000000000000000000000000000000000000000000000ddfe8aa67c603e0189000000000000000000000000000000000000000000000000","value":"0x58a82aebf84521e","gasPrice":"93100000000","gas":"412138"}

# function ZapOut2PairToken(
#     address FromUniPoolAddress,
#     uint256 IncomingLP,
#     address affiliate
# )
# ZapOut2PairToken test
# seth send $TOKEN_LP_GOLD_RING "approve(address,uint256)" $ZAPOUT $(seth --to-int256 -1)
# amount=$(seth --to-wei 1 ether)
# aff=0x0000000000000000000000000000000000000000
# seth send $ZAPOUT "ZapOut2PairToken(address,uint256,address)" $TOKEN_LP_GOLD_RING $amount $aff 

# function ZapOut(
#     address ToTokenContractAddress,
#     address FromUniPoolAddress,
#     uint256 IncomingLP,
#     uint256 minTokensRec,
#     address[] memory swapTargets,
#     bytes memory swap1Data,
#     bytes memory swap2Data,
#     address affiliate
# ) public nonReentrant stopInEmergency returns (uint256 tokensRec) {
# # ZapOut test toToken=GOLD 
# token0=$(seth call $TOKEN_LP_GOLD_RING "token0()(address)") # ring
# token1=$(seth call $TOKEN_LP_GOLD_RING "token1()(address)") # gold
# totalSupply=$(seth call $TOKEN_LP_GOLD_RING "totalSupply()(uint256)")
# balance0=$(seth call $token0 "balanceOf(address)(uint256)" $TOKEN_LP_GOLD_RING)
# balance1=$(seth call $token1 "balanceOf(address)(uint256)" $TOKEN_LP_GOLD_RING)
# liquidity=$(seth --to-wei 3.2 ether)
# deadline=$(bc <<< "$(date +%s) + 60 * 20")
# # amount0 = liquidity.mul(balance0) / _totalSupply;
# # amount1 = liquidity.mul(balance1) / _totalSupply;
# amount0=$(bc <<< "$liquidity * $balance0 / $totalSupply")
# amount1=$(bc <<< "$liquidity * $balance1 / $totalSupply")
# minlp=$(seth --to-wei 0.001 ether)
# swap=[$UNISWAP_ROUTERV2,0x0000000000000000000000000000000000000000]
# data1=$(seth calldata "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)" $amount0 $minlp [$TOKEN_RING,$TOKEN_GOLD] $ZAPOUT $deadline)
# data2=0x0
# aff=0x0000000000000000000000000000000000000000
# # seth send $TOKEN_LP_GOLD_RING "approve(address,uint256)" $ZAPOUT $(seth --to-int256 -1)
# seth send $ZAPOUT "ZapOut(address,address,uint256,uint256,address[],bytes,bytes,address)" $TOKEN_GOLD $TOKEN_LP_GOLD_RING $liquidity $minlp $swap $data1 $data2 $aff    
 
# # ZapOut test toToken=RING
# token0=$(seth call $TOKEN_LP_GOLD_RING "token0()(address)") # ring
# token1=$(seth call $TOKEN_LP_GOLD_RING "token1()(address)") # gold
# totalSupply=$(seth call $TOKEN_LP_GOLD_RING "totalSupply()(uint256)")
# balance0=$(seth call $token0 "balanceOf(address)(uint256)" $TOKEN_LP_GOLD_RING)
# balance1=$(seth call $token1 "balanceOf(address)(uint256)" $TOKEN_LP_GOLD_RING)
# liquidity=$(seth --to-wei 3.2 ether)
# deadline=$(bc <<< "$(date +%s) + 60 * 20")
# amount0=$(bc <<< "$liquidity * $balance0 / $totalSupply")
# amount1=$(bc <<< "$liquidity * $balance1 / $totalSupply")
# minlp=$(seth --to-wei 0.001 ether)
# swap=[0x0000000000000000000000000000000000000000,$UNISWAP_ROUTERV2]
# data1=0x0
# data2=$(seth calldata "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)" $amount1 $minlp [$TOKEN_GOLD,$TOKEN_RING] $ZAPOUT $deadline)
# aff=0x0000000000000000000000000000000000000000
# # seth send $TOKEN_LP_GOLD_RING "approve(address,uint256)" $ZAPOUT $(seth --to-int256 -1)
# seth send $ZAPOUT "ZapOut(address,address,uint256,uint256,address[],bytes,bytes,address)" $TOKEN_RING $TOKEN_LP_GOLD_RING $liquidity $minlp $swap $data1 $data2 $aff    

# # ZapOut test toToken=ETH
# token0=$(seth call $TOKEN_LP_GOLD_RING "token0()(address)") # ring
# token1=$(seth call $TOKEN_LP_GOLD_RING "token1()(address)") # gold
# totalSupply=$(seth call $TOKEN_LP_GOLD_RING "totalSupply()(uint256)")
# balance0=$(seth call $token0 "balanceOf(address)(uint256)" $TOKEN_LP_GOLD_RING)
# balance1=$(seth call $token1 "balanceOf(address)(uint256)" $TOKEN_LP_GOLD_RING)
# liquidity=$(seth --to-wei 3.2 ether)
# deadline=$(bc <<< "$(date +%s) + 60 * 20")
# amount0=$(bc <<< "$liquidity * $balance0 / $totalSupply")
# amount1=$(bc <<< "$liquidity * $balance1 / $totalSupply")
# minlp=$(seth --to-wei 1 wei)
# swap=[$UNISWAP_ROUTERV2,$UNISWAP_ROUTERV2]
# data1=$(seth calldata "swapExactTokensForETH(uint256,uint256,address[],address,uint256)" $amount0 $minlp [$TOKEN_RING,$WETH] $ZAPOUT $deadline)
# data2=$(seth calldata "swapExactTokensForETH(uint256,uint256,address[],address,uint256)" $amount1 $minlp [$TOKEN_GOLD,$WETH] $ZAPOUT $deadline)
# aff=0x0000000000000000000000000000000000000000
# # seth send $TOKEN_LP_GOLD_RING "approve(address,uint256)" $ZAPOUT $(seth --to-int256 -1)
# seth send $ZAPOUT "ZapOut(address,address,uint256,uint256,address[],bytes,bytes,address)" 0x0000000000000000000000000000000000000000 $TOKEN_LP_GOLD_RING $liquidity $minlp $swap $data1 $data2 $aff    

# seth call $UNISWAPV2ORACLELIBRARY "currentCumulativePrices(address)(uint256,uint256,uint32)" $TOKEN_LP_GOLD_RING
